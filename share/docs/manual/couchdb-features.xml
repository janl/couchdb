<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                         'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % every.entities SYSTEM "entities.ent">
%every.entities;
]>
<chapter id="couchdb-single-features">

  <title>Features and Functionality</title>

  <para>
    &nbsp;
  </para>

  <section id="couchdb-single-features-httprange">

    <title>HTTP Range Requests</title>

    <para>
      HTTP allows you to specify byte ranges for requests. This allows
      the implementation of resumable downloads and skippable audio and
      video streams alike. The following example uses a text file to
      make the range request process easier.
    </para>

<programlisting>
shell&gt; <userinput>cat file.txt</userinput>
My hovercraft is full of eels!
</programlisting>

    <para>
      Uploading this as an attachment to a <literal>text</literal>
      database using <command>curl</command>:
    </para>

<programlisting>
shell&gt; <userinput>curl -X PUT http://127.0.0.1:5984/test/doc/file.txt \
    -H "Content-Type: application/octet-stream" -d@file.txt</userinput>
{"ok":true,"id":"doc","rev":"1-287a28fa680ae0c7fb4729bf0c6e0cf2"}
</programlisting>

    <para>
      Requesting the whole file works as normal:
    </para>

<programlisting>
shell&gt; <userinput>curl -X GET http://127.0.0.1:5984/test/doc/file.txt</userinput>
My hovercraft is full of eels!
</programlisting>

    <para>
      But to retrieve only the first 13 bytes using
      <command>curl</command>:
    </para>

<programlisting>
shell&gt; <userinput>curl -X GET http://127.0.0.1:5984/test/doc/file.txt -H "Range: bytes=0-12"</userinput>
My hovercraft
</programlisting>

    <para>
      HTTP supports many ways to specify single and even multiple byte
      rangers. See
      <ulink
          url="http://tools.ietf.org/html/rfc2616#section-14.27">RFC
      2616</ulink>.
    </para>

    <note>
      <para>
        Databases that have been created with CouchDB 1.0.2 or earlier
        will support range requests in 1.1.0, but they are using a
        less-optimal algorithm. If you plan to make heavy use of this
        feature, make sure to compact your database with CouchDB 1.1.0
        to take advantage of a better algorithm to find byte ranges.
      </para>
    </note>

  </section>

  <section id="couchdb-single-features-proxying">

    <title>HTTP Proxying</title>

    <para>
      The HTTP proxy feature makes it easy to map and redirect different
      content through your CouchDB URL. The proxy works by mapping a
      pathname and passing all content after that prefix through to the
      configured proxy address.
    </para>

    <para>
      Configuration of the proxy redirect is handled through the
      <literal>[httpd_global_handlers]</literal> section of the CouchDB
      configuration file (typically <filename>local.ini</filename>). The
      format is:
    </para>

<programlisting>
[httpd_global_handlers]
PREFIX = {couch_httpd_proxy, handle_proxy_req, &lt;&lt;"DESTINATION"&gt;&gt;}
  </programlisting>

    <para>
      Where:
    </para>

    <itemizedlist>

      <listitem>
        <para>
          <literal>PREFIX</literal>
        </para>

        <para>
          Is the string that will be matched. The string can be any
          valid qualifier, although to ensure that existing database
          names are not overridden by a proxy configuration, you can use
          an underscore prefix.
        </para>
      </listitem>

      <listitem>
        <para>
          <literal>DESTINATION</literal>
        </para>

        <para>
          The fully-qualified URL to which the request should be sent.
          The destination must include the <literal>http</literal>
          prefix. The content is used verbatim in the original request,
          so you can also forward to servers on different ports and to
          specific paths on the target host.
        </para>
      </listitem>

    </itemizedlist>

    <para>
      The proxy process then translates requests of the form:
    </para>

<programlisting>
http://couchdb:5984/PREFIX/path
</programlisting>

    <para>
      To:
    </para>

<programlisting>
DESTINATION/path
</programlisting>

    <note>
      <para>
        Everything after <literal>PREFIX</literal> including the
        required forward slash will be appended to the
        <literal>DESTINATION</literal>.
      </para>
    </note>

    <para>
      The response is then communicated back to the original client.
    </para>

    <para>
      For example, the following configuration:
    </para>

<programlisting>
<![CDATA[
_google = {couch_httpd_proxy, handle_proxy_req, <<"http://www.google.com">>}]]>
</programlisting>

    <para>
      Would forward all requests for
      <literal>http://couchdb:5984/_google</literal> to the Google
      website.
    </para>

    <para>
      The service can also be used to forward to related CouchDB
      services, such as Lucene:
    </para>

<programlisting>
  <![CDATA[
[httpd_global_handlers]
_fti = {couch_httpd_proxy, handle_proxy_req, <<"http://127.0.0.1:5985">>}]]>
</programlisting>

    <note>
      <para>
        The proxy service is basic. If the request is not identified by
        the <literal>DESTINATION</literal>, or the remainder of the
        <literal>PATH</literal> specification is incomplete, the
        original request URL is interpreted as if the
        <literal>PREFIX</literal> component of that URL does not exist.
      </para>

      <para>
        For example, requesting
        <literal>http://couchdb:5984/_intranet/media</literal> when
        <filename>/media</filename> on the proxy destination does not
        exist, will cause the request URL to be interpreted as
        <literal>http://couchdb:5984/media</literal>. Care should be
        taken to ensure that both requested URLs and destination URLs
        are able to cope
      </para>
    </note>

  </section>

  <section id="couchdb-single-features-commonjs">

    <title>CommonJS support for map functions</title>

    <para>
      CommonJS support allows you to use CommonJS notation inside
      <methodname>map</methodname> and <methodname>reduce</methodname>
      functions, but only of libraries that are stored inside the views
      part of the design doc.
    </para>

    <para>
      So you could continue to access CommonJS code in design_doc.foo,
      from your list functions etc, but we'd add the ability to require
      CommonJS modules within map and reduce, but only from
      <filename>design_doc.views.lib</filename>.
    </para>

    <para>
      There's no worry here about namespace collisions, as Couch just
      plucks <literal>views.*.map</literal> and
      <literal>views.*.reduce</literal> out of the design doc. So you
      could have a view called <literal>lib</literal> if you wanted, and
      still have CommonJS stored in <literal>views.lib.sha1</literal>
      and <literal>views.lib.stemmer</literal> if you wanted.
    </para>

    <para>
      The implementation is simplified by enforcing that CommonJS
      modules to be used in <methodname>map</methodname> functions be
      stored in views.lib.
    </para>

    <para>
      A sample design doc (taken from the test suite in Futon) is below:
    </para>

<programlisting>
{
   "views" : {
      "lib" : {
         "baz" : "exports.baz = 'bam';",
         "foo" : {
            "zoom" : "exports.zoom = 'yeah';",
            "boom" : "exports.boom = 'ok';",
            "foo" : "exports.foo = 'bar';"
         }
      },
      "commonjs" : {
         "map" : "function(doc) { emit(null, require('views/lib/foo/boom').boom)}"
      }
   },
   "_id" : "_design/test"
}
</programlisting>

    <para>
      The <literal>require()</literal> statement is relative to the
      design document, but anything loaded form outside of
      <literal>views/lib</literal> will fail.
    </para>

  </section>

  <section id="couchdb-single-features-etag">

    <title>Granular ETag support</title>

    <para>
      ETags have been assigned to a map/reduce group (the collection of
      views in a single design document). Any change to any of the
      indexes for those views would generate a new ETag for all view
      URL's in a single design doc, even if that specific view's results
      had not changed.
    </para>

    <para>
      In CouchDB 1.1 each <literal>_view</literal> URL has it's own ETag
      which only gets updated when changes are made to the database that
      effect that index. If the index for that specific view does not
      change, that view keeps the original ETag head (therefore sending
      back 304 Not Modified more often).
    </para>

  </section>

</chapter>
