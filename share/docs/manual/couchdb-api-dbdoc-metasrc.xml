<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC '-//OASIS//DTD DocBook XML V4.5//EN'
                         'http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd' [
<!ENTITY % every.entities SYSTEM "entities.ent">
%every.entities;
]>
<chapter id="couchdb-api-dbdoc">

  <title>CouchDB API Server Document Methods</title>

  <para>
    The CouchDB API Server Document methods detail how to create, read,
    update and delete documents within a database.
  </para>

  <para>
    A list of the available methods and URL paths are provided below:
  </para>

  <para role="meta" id="table-couchdb-api-dbdoc-summary">
    <remark role="title">Document API Calls</remark>

    <remark role="type" condition="urlapi"/>

    <remark role="src" condition="couchdb"/>

    <remark role="output" condition="summarytable"/>

    <remark role="filter_class" condition="dbdoc"/>

    <remark role="version" condition="inherit"/>

    <remark role="idprefix" condition="couchdb-api-dbdoc"/>
  </para>

  <section id="couchdb-api-dbdoc_db_post">

    <title><literal>POST /db</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="dbdoc"/>

      <remark role="method" condition="POST"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      Create a new document in the specified database, using the
      supplied JSON document structure. If the JSON structure includes
      the <literal>_id</literal> field, then the document will be
      created with the specified document ID. If the
      <literal>_id</literal> field is not specified, a new unique ID
      will be generated.
    </para>

    <para>
      For example, you can generate a new document with a generated UUID
      using the following request:
    </para>

<programlisting>
POST http://couchdb:5984/recipes/
Content-Type: application/json

{
   "servings" : 4,
   "subtitle" : "Delicious with fresh bread",
   "title" : "Fish Stew"
}
</programlisting>

    <para>
      The return JSON will specify the automatically enerated ID and
      revision information:
    </para>

<programlisting>
{
   "id" : "64575eef70ab90a2b8d55fc09e00440d",
   "ok" : true,
   "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
}
</programlisting>

    <section id="couchdb-api-dbdoc_db_post-docid">

      <title>Specifying the Document ID</title>

      <para>
        The document ID can be specified by including the
        <literal>_id</literal> field in the JSON of the submitted
        record. The following request will create the same document with
        the ID <literal>FishStew</literal>:
      </para>

<programlisting>
POST http://couchdb:5984/recipes/
Content-Type: application/json

{
   "_id" : "FishStew",
   "servings" : 4,
   "subtitle" : "Delicious with fresh bread",
   "title" : "Fish Stew"
}
</programlisting>

      <para>
        The structure of the submitted document is as shown in the table
        below:
      </para>

      <para role="meta" id="table-couchdb-api-json-document">
        <remark role="type" condition="json"/>

        <remark role="src" condition="json"/>

        <remark role="output" condition="itemtable"/>

        <remark role="itemid" condition="document"/>

        <remark role="version" condition="inherit"/>
      </para>

      <para>
        In either case, the returned JSON will specify the document ID,
        revision ID, and status message:
      </para>

<programlisting>
{
   "id" : "FishStew",
   "ok" : true,
   "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
}
    </programlisting>

    </section>

    <section id="couchdb-api-dbdoc_db_batchmode">

      <title>Batch Mode Writes</title>

      <para>
        You can write documents to the database at a higher rate by
        using the batch option. This collects document writes together
        in memory (on a user-by-user basis) before they are committed to
        disk. This increases the risk of the documents not being stored
        in the event of a failure, since the documents are not written
        to disk immediately.
      </para>

      <para>
        To use the batched mode, append the <literal>batch=ok</literal>
        query argument to the URL of the <literal>PUT</literal> or
        <literal>POST</literal> request. The CouchDB server will respond
        with a 202 HTTP response code immediately.
      </para>

    </section>

    <section id="couchdb-api-dbdoc_db-doc-attachments">

      <title>Including Attachments</title>

      <para>
        You can include one or more attachments with a given document by
        incorporating the attachment information within the JSON of the
        document. This provides a simpler alternative to loading
        documents with attachments than making a separate call (see
        <xref
        linkend="couchdb-api-dbdoc_db-doc-attachment_put"/>).
      </para>

      <para role="meta" id="table-couchdb-api-dbdoc-documentattachments">
        <remark role="type" condition="json"/>

        <remark role="src" condition="json"/>

        <remark role="output" condition="itemtable"/>

        <remark role="itemid" condition="document_with_attachments"/>

        <remark role="version" condition="inherit"/>
      </para>

      <para>
        The <literal>filename</literal> will be the attachment name. For
        example, when sending the JSON structure below:
      </para>

<programlisting>
{
   "_id" : "FishStew",
   "servings" : 4,
   "subtitle" : "Delicious with fresh bread",
   "title" : "Fish Stew"
   "_attachments" : {
      "styling.css" : {
         "content-type" : "text/css",
         "data" : "cCB7IGZvbnQtc2l6ZTogMTJwdDsgfQo=",
         },
   },
}
    </programlisting>

      <para>
        The attachment <literal>styling.css</literal> can be accessed
        using <literal>/recipes/FishStew/styling.css</literal>. For more
        information on attachments, see
        <xref
        linkend="couchdb-api-dbdoc_db-doc-attachment_get"/>.
      </para>

      <para>
        The document data embedded in to the structure must be encoded
        using base64.
      </para>

    </section>

  </section>

  <section id="couchdb-api-dbdoc_db-doc_get">

    <title><literal>GET /db/doc</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc"/>

      <remark role="method" condition="GET"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      Returns the specified <literal>doc</literal> from the specified
      <literal>db</literal>. For example, to retrieve the document with
      the id <literal>FishStew</literal> you would send the following
      request:
    </para>

<programlisting>
GET http://couchdb:5984/recipes/FishStew
Content-Type: application/json
Accept: application/json
</programlisting>

    <para>
      The returned JSON is the JSON of the document, including the
      document ID and revision number:
    </para>

<programlisting>
{
   "_id" : "FishStew",
   "_rev" : "3-a1a9b39ee3cc39181b796a69cb48521c",
   "servings" : 4,
   "subtitle" : "Delicious with a green salad",
   "title" : "Irish Fish Stew"
}
    </programlisting>

    <para>
      Unless you request a specific revision, the latest revision of the
      document will always be returned.
    </para>

    <section id="couchdb-api-dbdoc_db-doc_get-attachments">

      <title>Attachments</title>

      <para>
        If the document includes attachments, then the returned
        structure will contain a summary of the attachments associatd
        with the document, but not the attachment data itself.
      </para>

      <para>
        The JSON for the returned document will include the
        <literal>_attachments</literal> field, with one or more
        attachment definitions. For example:
      </para>

<programlisting>
{
   "_id" : "FishStew",
   "servings" : 4,
   "subtitle" : "Delicious with fresh bread",
   "title" : "Fish Stew"
   "_attachments" : {
      "styling.css" : {
         "stub" : true,
         "content-type" : "text/css",
         "length" : 783426,
         },
   },
}
</programlisting>

      <para>
        The format of the returned JSON is shown in the table below:
      </para>

      <para role="meta" id="table-couchdb-api-dbdoc-returneddocumentattachments">
        <remark role="type" condition="json"/>

        <remark role="src" condition="json"/>

        <remark role="output" condition="itemtable"/>

        <remark role="itemid" condition="returneddocument_with_attachments"/>

        <remark role="version" condition="inherit"/>
      </para>

    </section>

    <section id="couchdb-api-dbdoc_db-doc_get-revs">

      <title>Getting a List of Revisions</title>

      <para>
        You can obtain a list of the revisions for a given document by
        adding the <literal>revs=true</literal> parameter to the request
        URL. For example:
      </para>

<programlisting>
GET http://couchdb:5984/recipes/FishStew?revs=true
Accept: application/json
</programlisting>

      <para>
        The returned JSON structure includes the original document,
        including a <literal>_revisions</literal> structure that
        includes the revision information:
      </para>

<programlisting>
{
   "servings" : 4,
   "subtitle" : "Delicious with a green salad",
   "_id" : "FishStew",
   "title" : "Irish Fish Stew",
   "_revisions" : {
      "ids" : [
         "a1a9b39ee3cc39181b796a69cb48521c",
         "7c4740b4dcf26683e941d6641c00c39d",
         "9c65296036141e575d32ba9c034dd3ee"
      ],
      "start" : 3
   },
   "_rev" : "3-a1a9b39ee3cc39181b796a69cb48521c"
}
</programlisting>

      <para role="meta" id="table-couchdb-api-dbdoc-document_with_revs">
        <remark role="type" condition="json"/>

        <remark role="src" condition="json"/>

        <remark role="output" condition="itemtable"/>

        <remark role="itemid" condition="document_with_revs"/>

        <remark role="version" condition="inherit"/>
      </para>

    </section>

    <section id="couchdb-api-dbdoc_db-doc_get-revsextended">

      <title>Obtaining an Extended Revision History</title>

      <para>
        You can get additional information about the revisions for a
        given document by supplying the <literal>revs_info</literal>
        argument to the query:
      </para>

<programlisting>
GET http://couchdb:5984/recipes/FishStew?revs_info=true
Accept: application/json
</programlisting>

      <para>
        This returns extended revision information, including the
        availability and status of each revision:
      </para>

<programlisting>
{
   "servings" : 4,
   "subtitle" : "Delicious with a green salad",
   "_id" : "FishStew",
   "_revs_info" : [
      {
         "status" : "available",
         "rev" : "3-a1a9b39ee3cc39181b796a69cb48521c"
      },
      {
         "status" : "available",
         "rev" : "2-7c4740b4dcf26683e941d6641c00c39d"
      },
      {
         "status" : "available",
         "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
      }
   ],
   "title" : "Irish Fish Stew",
   "_rev" : "3-a1a9b39ee3cc39181b796a69cb48521c"
}
</programlisting>

      <para role="meta" id="table-couchdb-api-dbdoc-document_with_revs_info">
        <remark role="type" condition="json"/>

        <remark role="src" condition="json"/>

        <remark role="output" condition="itemtable"/>

        <remark role="itemid" condition="document_with_revs_info"/>

        <remark role="version" condition="inherit"/>
      </para>

    </section>

    <section id="couchdb-api-dbdoc_db-doc_get-specrev">

      <title>Obtaining a Specific Revision</title>

      <para>
        To get a specific revision, use the <literal>rev</literal>
        argument to the request, and specify the full revision number:
      </para>

<programlisting>
GET http://couchdb:5984/recipes/FishStew?rev=2-7c4740b4dcf26683e941d6641c00c39d
Accept: application/json
</programlisting>

      <para>
        The specified revision of the document will be returned,
        including a <literal>_rev</literal> field specifying the
        revision that was requested:
      </para>

<programlisting>
{
   "_id" : "FishStew",
   "_rev" : "2-7c4740b4dcf26683e941d6641c00c39d",
   "servings" : 4,
   "subtitle" : "Delicious with a green salad",
   "title" : "Fish Stew"
}
</programlisting>

    </section>

  </section>

  <section id="couchdb-api-dbdoc_db-doc_head">

    <title><literal>HEAD /db/doc</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc"/>

      <remark role="method" condition="HEAD"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      Returns the HTTP Headers containing a minimal amount of
      information about the specified document. The method supports the
      same query arguments as the <literal>GET</literal> method, but
      only the header information (including document size, and the
      revision as an ETag), is returned. For example, a simple
      <literal>HEAD</literal> request:
    </para>

<programlisting>
HEAD http://couchdb:5984/recipes/FishStew
Content-Type: application/json
    </programlisting>

    <para>
      Returns the following HTTP Headers:
    </para>

<programlisting>
HTTP/1.1 200 OK
Server: CouchDB/1.0.1 (Erlang OTP/R13B)
Etag: "7-a19a1a5ecd946dad70e85233ba039ab2"
Date: Fri, 05 Nov 2010 14:54:43 GMT
Content-Type: text/plain;charset=utf-8
Content-Length: 136
Cache-Control: must-revalidate
</programlisting>

    <para>
      The <literal>Etag</literal> header shows the current revision for
      the requested document, and the <literal>Content-Length</literal>
      specifies the length of the data, if the document were requested
      in full.
    </para>

    <para>
      Adding any of the query arguments (as supported by
      <link linkend="couchdb-api-dbdoc_db-doc_get"><literal>GET</literal></link>
      method), then the resulting HTTP Headers will correspond to what
      would be returned. Note that the current revision is not returned
      when the <literal>refs_info</literal> argument is used. For
      example:
    </para>

<programlisting>
HTTP/1.1 200 OK
Server: CouchDB/1.0.1 (Erlang OTP/R13B)
Date: Fri, 05 Nov 2010 14:57:16 GMT
Content-Type: text/plain;charset=utf-8
Content-Length: 609
Cache-Control: must-revalidate
</programlisting>

  </section>

  <section id="couchdb-api-dbdoc_db-doc_put">

    <title><literal>PUT /db/doc</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc"/>

      <remark role="method" condition="PUT"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      The <literal>PUT</literal> method creates a new named document, or
      creates a new revision of the existing document. Unlike the
      <link linkend="couchdb-api-dbdoc_db_post"><literal>POST</literal></link>
      method, you must specify the document ID in the request URL.
    </para>

    <para>
      For example, to create the docment <literal>FishStew</literal>,
      you would send the following request:
    </para>

<programlisting>PUT http://couchdb:5984/recipes/FishStew
Content-Type: application/json

{
  "servings" : 4,
  "subtitle" : "Delicious with fresh bread",
  "title" : "Fish Stew"
}
</programlisting>

    <para>
      The return type is JSON of the status, document ID,and revision
      number:
    </para>

<programlisting>
{
   "id" : "FishStew",
   "ok" : true,
   "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
}
</programlisting>

    <section id="couchdb-api-dbdoc_db-doc_put-update">

      <title>Updating an Existing Document</title>

      <para>
        To update an existing document you must specify the current
        revision number within the <literal>_rev</literal> parameter.
        For example:
      </para>

<programlisting>
PUT http://couchdb:5984/recipes/FishStew
Content-Type: application/json

{
  "_rev" : "1-9c65296036141e575d32ba9c034dd3ee",
  "servings" : 4,
  "subtitle" : "Delicious with fresh salad",
  "title" : "Fish Stew"
}
</programlisting>

      <para>
        Alternatively, you can supply the current revision number in the
        <literal>If-Match</literal> HTTP header of the request. For
        example:
      </para>

<programlisting>
PUT http://couchdb:5984/recipes/FishStew
If-Match: 2-d953b18035b76f2a5b1d1d93f25d3aea
Content-Type: application/json

{
   "servings" : 4,
   "subtitle" : "Delicious with fresh salad",
   "title" : "Fish Stew"
}
</programlisting>

      <para>
        The JSON returned will include the updated revision number:
      </para>

<programlisting>
{
   "id" : "FishStew99",
   "ok" : true,
   "rev" : "2-d953b18035b76f2a5b1d1d93f25d3aea"
}
</programlisting>

      <para>
        For information on batched writes, which can provide improved
        performance, see
        <xref linkend="couchdb-api-dbdoc_db_batchmode"/>.
      </para>

    </section>

  </section>

  <section id="couchdb-api-dbdoc_db-doc_delete">

    <title><literal>DELETE /db/doc</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc"/>

      <remark role="method" condition="DELETE"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      Deletes the specified document from the database. You must supply
      the current (latest) revision, either by using the
      <literal>rev</literal> parameter to specify the revision:
    </para>

<programlisting>
DELETE http://couchdb:5984/recipes/FishStew?rev=3-a1a9b39ee3cc39181b796a69cb48521c
Content-Type: application/json
</programlisting>

    <para>
      Alternatively, you can use ETags with the
      <literal>If-Match</literal> field:
    </para>

<programlisting>
DELETE http://couchdb:5984/recipes/FishStew
If-Match: 3-a1a9b39ee3cc39181b796a69cb48521c
Content-Type: application/json
    </programlisting>

    <para>
      The returned JSON contains the document ID, revision and status:
    </para>

<programlisting>
{
   "id" : "FishStew",
   "ok" : true,
   "rev" : "4-2719fd41187c60762ff584761b714cfb"
}
</programlisting>

    <note>
      <para>
        Note that deletion of a record increments the revision number.
        The use of a revision for deletion of the record allows
        replication of the database to correctly track the deletion in
        synchronized copies.
      </para>
    </note>

  </section>

  <section id="couchdb-api-dbdoc_db-doc_copy">

    <title><literal>COPY /db/doc</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc"/>

      <remark role="method" condition="COPY"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      The <literal>COPY</literal> command (which is non-standard HTTP)
      copies an existing document to a new or existing document.
    </para>

    <para>
      The source document is specified on the request line, with the
      <literal>Destination</literal> HTTP Header of the request
      specifying the target document.
    </para>

    <section id="couchdb-api-dbdoc_db-doc_copy-simple">

      <title>Copying a Document</title>

      <para>
        You can copy the latest version of a document to a new document
        by specifying the current document and target document:
      </para>

<programlisting>
COPY http://couchdb:5984/recipes/FishStew
Content-Type: application/json
Destination: IrishFishStew
</programlisting>

      <para>
        The above request copies the document
        <literal>FishStew</literal> to the new document
        <literal>IrishFishStew</literal>. The response is the ID and
        revision of the new document.
      </para>

<programlisting>
{
   "id" : "IrishFishStew",
   "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
}
</programlisting>

    </section>

    <section id="couchdb-api-dbdoc_db-doc_copy-specrev">

      <title>Copying from a Specific Revision</title>

      <para>
        To copy <emphasis>from</emphasis> a specific version, use the
        <literal>rev</literal> argument to the query string:
      </para>

<programlisting>
COPY http://couchdb:5984/recipes/FishStew?rev=5-acfd32d233f07cea4b4f37daaacc0082
Content-Type: application/json
Destination: IrishFishStew
</programlisting>

      <para>
        The new document will be created using the information in the
        specified revision of the source document.
      </para>

    </section>

    <section id="couchdb-api-dbdoc_db-doc_copy-existing">

      <title>Copying to an Existing Document</title>

      <para>
        To copy to an existing document, you must specify the current
        revision string for the target document, using the
        <literal>rev</literal> parameter to the
        <literal>Destination</literal> HTTP Header string. For example:
      </para>

<programlisting>
COPY http://couchdb:5984/recipes/FishStew
Content-Type: application/json
Destination: IrishFishStew?rev=1-9c65296036141e575d32ba9c034dd3ee
</programlisting>

      <para>
        The return value will be the new revision of the copied
        document:
      </para>

<programlisting>
{
   "id" : "IrishFishStew",
   "rev" : "2-55b6a1b251902a2c249b667dab1c6692"
}
</programlisting>

    </section>

  </section>

  <section id="couchdb-api-dbdoc_db-doc-attachment_get">

    <title><literal>GET /db/doc/attachment</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc-attachment"/>

      <remark role="method" condition="GET"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      Returns the file attachment <literal>attachment</literal>
      associated with the document <literal>doc</literal>. The raw data
      of the associated attachment is returned (just as if you were
      accessing a static file. The returned HTTP
      <literal>Content-type</literal> will be the same as the content
      type set when the document attachment was submitted into the
      database.
    </para>

  </section>

  <section id="couchdb-api-dbdoc_db-doc-attachment_put">

    <title><literal>PUT /db/doc/attachment</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc-attachment"/>

      <remark role="method" condition="PUT"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      Upload the supplied content as an attachment to the specified
      document (<literal>doc</literal>). The
      <literal>attachment</literal> name provided must be a URL encoded
      string. You must also supply either the <literal>rev</literal>
      query argument or the <literal>If-Match</literal> HTTP header for
      validation, and the HTTP headers (to set the attacment content
      type). The content type is used when the attachment is requested
      as the corresponding content-type in the returned document header.
    </para>

    <para>
      For example, you could upload a simple text document using the
      following request:
    </para>

<programlisting>
PUT http://couchdb:5984/recipes/FishStew/basic?rev=8-a94cb7e50ded1e06f943be5bfbddf8ca
Content-Length: 10
Content-Type: text/plain

Roast it

</programlisting>

    <para>
      Or by using the <literal>If-Match</literal> HTTP header:
    </para>

<programlisting>
PUT http://couchdb:5984/recipes/FishStew/basic
If-Match: 8-a94cb7e50ded1e06f943be5bfbddf8ca
Content-Length: 10
Content-Type: text/plain

Roast it

</programlisting>

    <para>
      The returned JSON contains the new document information:
    </para>

<programlisting>
{
   "id" : "FishStew",
   "ok" : true,
   "rev" : "9-247bb19a41bfd9bfdaf5ee6e2e05be74"
}
</programlisting>

    <note>
      <para>
        Uploading an attachment updates the corresponding document
        revision. Revisions are tracked for the parent document, not
        individual attachments.
      </para>
    </note>

    <section id="couchdb-api-dbdoc_db-doc-attachment_put-existing">

      <title>Updating an Existing Attachment</title>

      <para>
        Uploading an attachment using an existing attachment name will
        update the corresponding stored content of the database. Since
        you must supply the revision information to add an attachment to
        a document, this serves as validation to update the existing
        attachment.
      </para>

    </section>

  </section>

  <section id="couchdb-api-dbdoc_db-doc-attachment_delete">

    <title><literal>DELETE /db/doc/attachment</literal></title>

    <para role="meta">
      <remark role="type" condition="urlapi"/>

      <remark role="src" condition="couchdb"/>

      <remark role="output" condition="accesstable"/>

      <remark role="itemid" condition="db-doc-attachment"/>

      <remark role="method" condition="DELETE"/>

      <remark role="version" condition="inherit"/>
    </para>

    <para>
      Deletes the attachment <literal>attachment</literal> to the
      specified <literal>doc</literal>. You must supply the
      <literal>rev</literal> argument with the current revision to
      delete the attachment.
    </para>

    <para>
      For example to delete the attachment <literal>basic</literal> from
      the recipe <literal>FishStew</literal>:
    </para>

<programlisting>
DELETE http://couchdb:5984/recipes/FishStew/basic?rev=9-247bb19a41bfd9bfdaf5ee6e2e05be74
Content-Type: application/json

    </programlisting>

    <para>
      The returned JSON contains the updated revision information:
    </para>

<programlisting>
{
   "id" : "FishStew",
   "ok" : true,
   "rev" : "10-561bf6b1e27615cee83d1f48fa65dd3e"
}
</programlisting>

  </section>

</chapter>
